type ContractEvent @entity {

  id: ID!
  event: String
  contract: Contract!
}

type Contract @entity {
  # Contract Address
  id: ID!
  name: String
  # Mainnet Subgraph
  subgraphDeployment: [SubgraphDeployment!]! @derivedFrom(field: "contract")
  
  contractEvent: [ContractEvent!]! @derivedFrom(field: "contract")
}

type Subgraph @entity {
  id: ID!
  active: Boolean!
  
  owner: GraphAccount!
  createdAt: Int!
  updatedAt: Int!
  displayName: String
  description: String
  image: String
  codeRepository: String
  website: String
  versionCount: BigInt!
  versions: [SubgraphVersion!]! @derivedFrom(field: "subgraph")
  metadataHash: Bytes!
  ipfsMetadataHash: String
  currentVersion: SubgraphVersion
}

type GraphAccount @entity {

  id: ID!
  subgraph: [Subgraph!]! @derivedFrom(field: "owner")
  
}

type SubgraphDeployment @entity {

  id: ID!
  ipfsHash: String!
  versions: [SubgraphVersion!]! @derivedFrom(field: "subgraphDeployment")
  createdAt: Int!
  originalName: String
  manifest: String
  network: Network!
  schema: String
  schemaIpfsHash: String
  contract: [Contract!]!
}

type Network @entity {

  id: ID!
  deployments: [SubgraphDeployment!]! @derivedFrom(field: "network")
}

type SubgraphVersion @entity {

  id: ID!
  subgraph: Subgraph!
  subgraphDeployment: SubgraphDeployment!
  version: Int!
  createdAt: Int!
  metadataHash: Bytes
  description: String
  label: String
}
