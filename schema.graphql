type ContractEvent @entity {

  id: ID!
  event: String
  contract: Contract!
}

type Contract @entity {
  # Contract Address
  id: ID!
  name: String
  # Mainnet Subgraph
  subgraphDeployment: [SubgraphDeployment!]! @derivedFrom(field: "contract")
  
  contractEvent: [ContractEvent!]! @derivedFrom(field: "contract")
}

type Subgraph @entity {
  id: ID!
  active: Boolean!
  
  owner: GraphAccount!
  createdAt: Int!
  updatedAt: Int!
  displayName: String
  description: String
  image: String
  codeRepository: String
  website: String
  versionCount: BigInt!
  versions: [SubgraphVersion!]! @derivedFrom(field: "subgraph")
  metadataHash: Bytes!
  ipfsMetadataHash: String
  currentVersion: SubgraphVersion

  signalledTokens: BigInt!
  unsignalledTokens: BigInt!
  currentSignalledTokens: BigInt!

  linkedEntity: Subgraph
  entityVersion: Int!
  currentVersionRelationEntity: CurrentSubgraphDeploymentRelation
  initializing: Boolean!
}

type CurrentSubgraphDeploymentRelation @entity {
  "Auxiliary entity used to batch update Subgraph entities when signalling on the deployment changes. ID replicates the deployment ID and adds a counter, to make it easy to reproduce."
  id: ID!
  subgraph: Subgraph!
  deployment: SubgraphDeployment!
  "Indicates whether this relation is active. This means that the deployment is still the current deployment for the named Subgraph"
  active: Boolean!
}


type GraphAccount @entity {

  id: ID!
  subgraph: [Subgraph!]! @derivedFrom(field: "owner")
  
}

type SubgraphDeployment @entity {

  id: ID!
  ipfsHash: String!
  
  versions: [SubgraphVersion!]! @derivedFrom(field: "subgraphDeployment")
  subgraph: Subgraph!
  
  createdAt: Int!
  originalName: String
  manifest: String
  network: Network!
  schema: String
  schemaIpfsHash: String
  contract: [Contract!]!

  "CURRENT signalled tokens in the bonding curve"
  signalledTokens: BigInt!
  
  # Counters for currentSignalledTokens tracking on Subgraph
  
  "Total amount of Subgraph entities that used this deployment at some point. subgraphCount >= activeSubgraphCount + deprecatedSubgraphCount"
  subgraphCount: Int!
  "Amount of active Subgraph entities that are currently using this deployment. Deprecated subgraph entities are not counted"
  activeSubgraphCount: Int!
  "Amount of Subgraph entities that were currently using this deployment when they got deprecated"
  deprecatedSubgraphCount: Int!
}

type Network @entity {

  id: ID!
  deployments: [SubgraphDeployment!]! @derivedFrom(field: "network")
}

type SubgraphVersion @entity {

  id: ID!
  subgraph: Subgraph!
  subgraphDeployment: SubgraphDeployment!
  version: Int!
  createdAt: Int!
  metadataHash: Bytes
  description: String
  label: String
  linkedEntity: Subgraph
  entityVersion: Int!
}

"""
Full test search
"""
type _Schema_
  @fulltext(
    name: "contractEventSearch"
    language: en
    algorithm: rank
    include: [{ entity: "ContractEvent", fields: [{ name: "event" }] }]
  )
  @fulltext(
    name: "contractSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Contract", fields: [{ name: "id" }] }]
  )
  @fulltext(
    name: "subgraphSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Subgraph", fields: [{ name: "displayName" }, { name: "description" }, { name: "codeRepository"}, { name: "website" }] }]
  )
  @fulltext(
    name: "graphAccountSearch"
    language: en
    algorithm: rank
    include: [{ entity: "GraphAccount", fields: [{ name: "id" }] }]
  )
  @fulltext(
    name: "subgraphDeploymentSearch"
    language: en
    algorithm: rank
    include: [{ entity: "SubgraphDeployment", fields: [{ name: "originalName" }] }]
  )
